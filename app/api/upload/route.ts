import { put } from "@vercel/blob"
import { type NextRequest, NextResponse } from "next/server"
import { getServerSession } from "next-auth"
import { authOptions } from "@/app/api/auth/[...nextauth]/route"

export async function POST(request: NextRequest): Promise<NextResponse> {
  try {
    // Verificar autenticaci√≥n
    const session = await getServerSession(authOptions)
    if (!session) {
      console.error("‚ùå No hay sesi√≥n de usuario")
      return NextResponse.json({ error: "No autorizado" }, { status: 401 })
    }

    console.log("‚úÖ Usuario autenticado:", session.user?.email)

    // Verificar que tenemos el token de Blob
    if (!process.env.BLOB_READ_WRITE_TOKEN) {
      console.error("‚ùå BLOB_READ_WRITE_TOKEN no est√° configurado")
      return NextResponse.json({ error: "Token de Blob no configurado" }, { status: 500 })
    }

    console.log("‚úÖ Token de Blob disponible")

    // Obtener el archivo del FormData
    const formData = await request.formData()
    const file = formData.get("file") as File

    if (!file) {
      console.error("‚ùå No se encontr√≥ archivo en la petici√≥n")
      return NextResponse.json({ error: "No se encontr√≥ archivo" }, { status: 400 })
    }

    console.log("‚úÖ Archivo recibido:", {
      name: file.name,
      size: file.size,
      type: file.type,
    })

    // Validar tipo de archivo
    if (!file.type.startsWith("image/")) {
      console.error("‚ùå Tipo de archivo no v√°lido:", file.type)
      return NextResponse.json({ error: "Solo se permiten im√°genes" }, { status: 400 })
    }

    // Validar tama√±o (m√°ximo 10MB)
    if (file.size > 10 * 1024 * 1024) {
      console.error("‚ùå Archivo demasiado grande:", file.size)
      return NextResponse.json({ error: "El archivo es demasiado grande (m√°ximo 10MB)" }, { status: 400 })
    }

    // Generar nombre √∫nico para el archivo
    const timestamp = new Date().toISOString().replace(/[:.]/g, "-")
    const fileName = `taxi-images/${timestamp}-${file.name}`

    console.log("üì§ Subiendo archivo a Vercel Blob:", fileName)

    // Subir a Vercel Blob usando put()
    const blob = await put(fileName, file, {
      access: "public",
      token: process.env.BLOB_READ_WRITE_TOKEN,
    })

    console.log("‚úÖ Archivo subido exitosamente:", blob)

    return NextResponse.json({
      url: blob.url,
      pathname: blob.pathname,
      contentType: blob.contentType,
      size: file.size,
    })
  } catch (error) {
    console.error("‚ùå Error en la subida de archivos:", error)

    // Log m√°s detallado del error
    if (error instanceof Error) {
      console.error("Error message:", error.message)
      console.error("Error stack:", error.stack)
    }

    return NextResponse.json(
      {
        error: "Error al procesar la subida de archivos",
        details: error instanceof Error ? error.message : "Error desconocido",
      },
      { status: 500 },
    )
  }
}
